exit
continue
exit
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.rb`
exit
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
path
File.new("out.wav", "rb")
File.read("out.wav", "rb")
path
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
Tempfile.new(['out', '.wav'])
TempFile.new(['out', '.wav'])
TempFile.new
path
exit
`ffmpeg -i`
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 `
`ffmpeg -i #{params[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
`ffmpeg -i #{pramas[:audio_file].tempfile.path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
`ffmpeg -i #{audio_file_path} -acodec pcm_s16le -ac 1 -ar 16000 out.wav`
ffmpeg
params[:audio_file].tempfile.path
params[:audio_file].tempfile
tempfile1
tempfile1.path
tempfile1.close
 tempfile1.write(params[:audio_file].read)
tempfile1 = Tempfile.new(['temp2', ".wav"])
tempfile
tempfile.path
tempfile.close
 tempfile.write(params[:audio_file].read)
tempfile = Tempfile.new(['temp2', ".wav"])
tempfile.read
tempfile.rewind
 tempfile.write(params[:audio_file])
tempfile.read
tempfile.rewind
 tempfile.write(params[:audio_file].read)
tempfile.read
tempfile.rewind
tempfile.read
tempfile.write("i am your boss")
params[:audio_file].tempfile.read
params[:audio_file].read
 tempfile.write(params[:audio_file].read)
tempfile = Tempfile.new(['temp', ".wav"])
params
exit
tempfile
tempfile.rewind
tempfile
tempfile.write(params[:audio_file].tempfile)
tempfile.write(params[:audio_file])
tempfile.binmode
tempfile = Tempfile.new(['temp', ".wav"])
tempfile.write(params[:audio_file])
tempfile
tempfile.length
tempfile
exit
tempfile.open
tempfile.read
tempfile.open
tempfile
IO.read(tempfile.path)
exit
tempfile
exit
path
exit
params[:audio_file].tempfileexit
tempfile
exit
params[:audio_file].tempfile
params[:audio_file].tempfile.path
params[:audio_file].path
params[:audio_file][1]
params[:audio_file][:tempfile]
@tempfile
params[:audio_file]
params
IO.read tempfile.path 
tempfile.length
path
 path=Rails.root.join('tmp', tempfile.path)
path
tempfile
tempfile.path
exit
tempfile
path.length
path
exit
Rails.root.join('tmp', path.path)
Rails.root.join('tmp', tempfile.path)
exit
eit
path
path.length
exit
path.length
path
exit
path
exit
path
exit
params
exit
params
exit
params
exit
params
params[:blob]
exit
cler
        f.write audio.read
File.open(save_path, 'wb') do |f|
exit
reload!
xit
continue
exit
File.open('tmp/taunt.wav', 'rb')
continue
exit
@path
exit
@hell
continue
exit
params[:audio_file].read
params[:audio_file]
params
exit
temp_file.write(params[:audio_file])
temp_file.write(audio_data.read)
 temp_file = Tempfile.new(['temp', ".wav"])
exit
Rails.root.join('tmp', tempfile.path)
tempfile.write(params[:audio_file].read)
tempfile.write(audio_data.read)
Rails.root.join('tmp', tempfile.path)
buffer = [audio_data].pack("C")
buffer = [ 1 ].pack("C")
tempfile.write(audio_data)
tempfile.write(audio_data.read)
tempfile.write(audio_data)
temp_file.write(audio_data)
tempfile = Tempfile.new(['temp', ".wav"])
continue
exit
continue
exit
@temfile
audio_file.url
audio_file
exit
clear
params[:audio]
params
exit
params[:data]
params
exit
params
exit
params
exit
params
exit
params[:test]
exit
params[:test]
exit
params[:test]
params
exit
params[:test]
params
exit
params
exit
params
exit
params[:audio_file]
params
exit
params
clear()
exit
params
exit
params[:audio_file]
params
exit
params
exit
params
params[:pictures]
params
exit
a
a=params[:audio_file].to_i
params[:audio_file].to_i
params[:audio_file]
params[:audio_file][3]
params[:audio_file][0]
params[:audio_file]
exit
params[:audio_file]
params[:audio]
exit
params[:tweet].present?
params[:tweet]
exit
params
exit
t=Tweet.search(params[:value], fields: [:caption], match: :text_middle).includes(:user,:likes, comments: [:user])
t=Tweet.search(params[:value], fields: [:caption], match: :text_middle).includes(:user, comments: [:user], :likes)
t[0].likes
t=Tweet.search(params[:value], fields: [:caption], match: :text_middle).includes(:user, :comments, :likes)
t[0].user
t=Tweet.search(params[:value], fields: [:caption], match: :text_middle).includes(:user)
Tweet.search(params[:value], fields: [:caption], match: :text_middle).includes(:user)
Tweet.search(params[:value], fields: [:caption], match: text_middle).includes(:user)
exit
count
continue
exit
bucket.files.get("uploads/thumbnail_#{obj.split(".")[0]}.png")
bucket.files.get("uploads/thumbnail_#{obj.split(".")[0].png}")
obj.split(".")[0]
obj.split("."[0])
bucket.files.get("uploads/thumbnail_#{obj.split("."[0])}")
obj
bucket.files
bucket.files.get("uploads/")
bucket.files.get("uploads")
obj
bucket.files.get("uploads/thumbnail_#{obj}")
exit
bucket.files.get("uploads/love2.jpg")
bucket.files.get("uploads/myphotos/")
bucket.files.get("uploads/myphotos/love2.jpg")
obj
bucket.files.get("uploads/myphotos/#{obj}")
bucket.files
continue
bucket.files.get("uploads/myphotos/#{obj}")
continue
exit
